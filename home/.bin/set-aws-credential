#!/usr/bin/env zsh

script_name=$(basename $0)
continue=true
aws_profile=''
mfa_code=''
AWS_ACCESS_KEY_ID=''
AWS_SECRET_ACCESS_KEY=''
AWS_SESSION_TOKEN=''
unset AWS_ACCESS_KEY_ID
unset AWS_SECRET_ACCESS_KEY
unset AWS_SESSION_TOKEN

is_sourced () {
    if [ "$ZSH_EVAL_CONTEXT" = 'toplevel' ]; then
        return 0
    else
        return 1
    fi
}

usage () {
    if [ $# -gt 0 ] && [ "$1" = "show_error" ] ; then
        # show error
        if [ -z "$aws_profile" ]; then
            echo "[ERROR] AWS profile not specified. Please specify the profile using the environment variable 'AWS_DEFAULT_PROFILE' or the -p option."
        fi
        if [ -z "$mfa_code" ]; then
            echo "[ERROR] MFA code is empty."
        fi
    fi
    cat <<EOM
Usage: $script_name [OPTION]...
  -a VALUE    mfa code
  -p VALUE    [OPTIONAL] profile name in ~/.aws/config
  -h          display help
EOM
}

if [ $# = 0 ]; then
    usage
    test is_sourced && return || exit 0
fi

while getopts "a:p:h" opt; do
    case "$opt" in
        a) mfa_code=$OPTARG;;
        p) aws_profile=$OPTARG;;
        h | *) usage; continue=false ;;
    esac
done
# Reset getopt index in case of source command
OPTIND=1
shift $OPTIND-1

if [ -z "$aws_profile" ] && [ -n "$AWS_DEFAULT_PROFILE" ]; then
    aws_profile=$AWS_DEFAULT_PROFILE
fi

if "$continue" && ([ -z "$aws_profile" ] || [ -z "$mfa_code" ]); then
    continue=false
    usage show_error
fi

if ! "$continue" ; then
    test is_sourced && return || exit 0 ;
fi

AWS_STS_CREDENTIALS=`aws sts assume-role \
    --profile default \
    --role-arn $(aws configure get $aws_profile.role_arn) \
    --role-session-name yuta.suzuki \
    --serial-number $(aws configure get $aws_profile.mfa_serial) \
    --token-code $mfa_code \
    --query 'Credentials.[AccessKeyId, SecretAccessKey, SessionToken]' \
    --output text`

AWS_ACCESS_KEY_ID=`echo "${AWS_STS_CREDENTIALS}" | cut -f 1`
AWS_SECRET_ACCESS_KEY=`echo "${AWS_STS_CREDENTIALS}" | cut -f 2`
AWS_SESSION_TOKEN=`echo "${AWS_STS_CREDENTIALS}" | cut -f 3`
if [ -n "$AWS_ACCESS_KEY_ID" ] && [ -n "$AWS_SECRET_ACCESS_KEY" ] && [ -n "$AWS_SESSION_TOKEN" ]; then
    export AWS_ACCESS_KEY_ID
    export AWS_SECRET_ACCESS_KEY
    export AWS_SESSION_TOKEN
fi